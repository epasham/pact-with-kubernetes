/*
 * This build file runs the pact contracts against the provider (producer)
 *
 * To delete pacts from the Pact Broker run
 *
 * To remove items from the pact-broker see remove-pact.sh
 */
buildscript {
    dependencies {
        classpath 'io.fabric8:kubernetes-client:2.6.3'
    }
}

import io.fabric8.kubernetes.client.DefaultKubernetesClient
import io.fabric8.kubernetes.client.KubernetesClientException

plugins {
    id 'au.com.dius.pact' version '3.5.6'
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.2'
}

// See https://github.com/DiUS/pact-jvm/tree/master/pact-jvm-provider-gradle
pact {
    // These are to test the contract against the real providers.
    // You can define as many providers as you need, but each must
    // have a unique name.
    serviceProviders {

        largestCitiesProvider {
            protocol = 'http'
            host = getClusterHost()
            port = getProviderServiceNodePort()
            hasPactsFromPactBroker(getPactBrokerEndpoint())
        }

        denverProvider {
            protocol = 'http'
            host = getClusterHost()
            port = getProviderServiceNodePort()
            hasPactsFromPactBroker(getPactBrokerEndpoint())
        }
    }
}

/** Where the PACT files are stored and retrieved. */
String getPactBrokerEndpoint() {
    return "http://" + getClusterHost() + ":" + getPactBrokerServiceNodePort()
}

/** Location where the actual service runs, ready to accept the PACT for verification. */
int getProviderServiceNodePort() {
    return new DefaultKubernetesClient().inNamespace('pact').services().withName('ms-cities').get().getSpec().getPorts().nodePort.get(0)
}

/** Location where the Pact broker is ready to server Pacts from. */
int getPactBrokerServiceNodePort() {
    return new DefaultKubernetesClient().inNamespace('pact').services().withName('pact-broker').get().getSpec().getPorts().nodePort.get(0)
}

/** The IP of the Kubernetes host. */
String getClusterHost() {
    return new DefaultKubernetesClient().getMasterUrl().host
}
